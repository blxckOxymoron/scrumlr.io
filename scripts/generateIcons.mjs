import { existsSync } from "fs";
import { appendFile, readFile, readdir, stat, writeFile } from "fs/promises";
import { dirname, resolve } from "path";
import { fileURLToPath } from "url";

const inPath = resolve(dirname(fileURLToPath(import.meta.url)), "../src/assets/icons");
const outPath = resolve(dirname(fileURLToPath(import.meta.url)), "out");

/**
 * extracts name and variant from an icon filename
 * e.g. 
 * ic-32-wifi-light4dark.svg -> { name: "wifi", variant: "light4dark" }
 * ic-32-settings-light-mode-dark4light.svg -> { name: "settings-light-mode", variant: "dark4light" }
 */
const iconNameRegex = /^ic-32-(?<name>[\w-]+)-(?<variant>\w+).svg$/;
const variantMap = {
  "light4dark": "light",
  "dark4light": "dark",
};

function toCamelCase(/** @type {string} */ str) {
  return str.split('-').map(capitalize).join('');
}

function capitalize(/** @type {string} */ str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

async function main() {

  console.log("Reading icons from /in...");

  const icons = await readdir(inPath);
  if (icons.length === 0) {
    console.error("No icons found in /in");
    return;
  }

  const iconNames = Array.from(new Set(icons.map(filename => {
    const { name } = iconNameRegex.exec(filename)?.groups ?? {};
    if (!name) {
      console.error(`!! Invalid filename: ${filename}`);
    }
    return name;
  })));

  const indexFile = resolve(outPath, "index.ts");
  await writeFile(indexFile, "");

  await appendFile(indexFile, `/* eslint-disable import/first, import/order, import/newline-after-import */
// This file is generated by generateIcons.mjs

import "./Icons.scss";
import createIcon from "./createIcon";

export type IconVariant = ${Object.values(variantMap).map(v => `"${v}"`).join(" | ")};
`
  );


  for (const iconName of iconNames) {
    if (!iconName) return;

    const variantObjectStrings = [];

    await appendFile(indexFile, `\n// ${iconName}\n`);

    for (const [variant, mappedVariant] of Object.entries(variantMap)) {
      const variantComponentName = toCamelCase(iconName) + capitalize(mappedVariant);
      const variantFile = resolve(inPath, `ic-32-${iconName}-${variant}.svg`);

      if (!existsSync(variantFile)) {
        console.error(`!! Variant file not found: ${variantFile}`);
        continue;
      }

      await appendFile(indexFile, `import {ReactComponent as ${variantComponentName}} from "assets/icons/ic-32-${iconName}-${variant}.svg";\n`);
      variantObjectStrings.push(`  ${mappedVariant}: ${variantComponentName},`);
    }
    await appendFile(indexFile, `export const ${toCamelCase(iconName)} = createIcon({\n${variantObjectStrings.join("\n")}\n});\n`);
  }

  console.log("Processing done.\nCheck and copy the index.ts file into the components/Icons folder.");

}

main();